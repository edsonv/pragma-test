{"version":3,"sources":["../node_modules/h8k-components/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","components/movie-list/index.js","App.js","registerServiceWorker.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","MovieList","useState","movieList","setMovieList","search","setSearch","searchInput","useRef","firstRender","setFirstRender","hasResults","setHasResults","handleSearch","useCallback","current","value","useEffect","fetch","response","json","data","length","console","log","className","type","placeholder","data-testid","ref","defaultValue","onClick","movie","key","imdbID","Title","App","header","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","applyPolyfills","defineCustomElements"],"mappings":"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","file":"static/js/main.bfd1fdce.chunk.js","sourcesContent":["var map = {\n\t\"./h8k-logo_2.entry.js\": [\n\t\t19,\n\t\t2\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 14;\nmodule.exports = webpackAsyncContext;","import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport \"./index.css\";\n\nfunction MovieList() {\n  const [movieList, setMovieList] = useState([])\n  const [search, setSearch] = useState('')\n  const searchInput = useRef(null)\n  const [firstRender, setFirstRender] = useState(true)\n  const [hasResults, setHasResults] = useState(null)\n\n\n  const handleSearch = useCallback(() => {\n    setSearch(searchInput.current.value)\n  }, [])\n\n  useEffect(() => {\n    fetch(`https://jsonmock.hackerrank.com/api/movies?Year=${search}`)\n      .then(response => response.json())\n      .then(response => {\n        if (response.data.length > 0) {\n          setMovieList(response.data)\n          setHasResults(true)\n        } else {\n          if (firstRender) {\n            setFirstRender(false)\n            setHasResults(true)\n          } else {\n            setFirstRender(false)\n            setHasResults(false)\n          }\n        }\n      })\n  }, [search])\n\n  console.log(movieList)\n  return (\n    < div className=\"layout-column align-items-center mt-50\" >\n      <section className=\"layout-row align-items-center justify-content-center\">\n        <input type=\"number\" className=\"large\" placeholder=\"Enter Year eg 2015\" data-testid=\"app-input\" ref={searchInput} defaultValue={search} />\n        <button className=\"\" data-testid=\"submit-button\" onClick={() => handleSearch()}>Search</button>\n      </section>\n      {\n        hasResults === false ? (\n          <div className=\"mt-50 slide-up-fade-in\" data-testid=\"no-result\">No result</div>\n        ) :\n          movieList && (\n            <ul className=\"mt-50 styled\" data-testid=\"movieList\">\n              {\n                movieList.map(movie => (\n                  <li className=\"slide-up-fade-in py-10\" key={movie.imdbID}>{movie.Title}</li>\n                ))\n              }\n            </ul>\n          )\n      }\n\n    </div >\n  );\n}\n\nexport default MovieList","import React  from 'react';\nimport './App.css';\nimport MovieList from './components/movie-list/index.js';\nimport 'h8k-components';\n\nconst title = \"Movie List\";\n\nfunction App() {\n  return (\n    <div>\n      <h8k-navbar header={title} />\n      <MovieList/>\n    </div>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport {applyPolyfills, defineCustomElements} from 'h8k-components/loader';\n\nReactDOM.render(<App/>, document.getElementById('root'));\nregisterServiceWorker();\n\napplyPolyfills().then(() => {\n     defineCustomElements(window);\n});\n"],"sourceRoot":""}